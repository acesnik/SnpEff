#!/usr/bin/env bds

#-------------------------------------------------------------------------------
#
# Create databases
#
#-------------------------------------------------------------------------------


# Command line options
bundleLists			:= false		help Create bundle lists and config entries
config				:= false		help Create config file
db					:= false		help Build databases
string[] dbs						help Build databases
dbTest				:= false		help Build databases used in test cases
distro	 			:= false		help Create distribution files (zip)
distroBundles		:= false		help Create bundle files (zip)
distroCore 			:= false		help Create distribution files (zip only 'core')
download 			:= false		help Download files
downloadUcsc		:= ''			help Download genome files from UCSC (genome name)
downloadNcbi		:= ''			help Download genome files from NCBI (genome name)
make	 			:= false		help Make (build JAR files)
query	 			:= false		help Run queries against UCSC MySql server
test	 			:= false		help Run SnpEff / SnpSift test cases
testHgvs 			:= false		help Run SnpEff HGVS test cases
uploadCore			:= false		help Upload 'core' package
uploadDbNsfp		:= false		help Upload dbNsfp to google drive
uploadDbs			:= false		help Upload all databases in 'zip' directory
uploadDev			:= false		help Upload 'development' version
uploadHtml 			:= false		help Upload weh pages
string[] zipGenome	= []			help Zip a specific genome

# Process us one CPU
cpus = 1

# Versions
ensemblReleases		:= [75, 86]
ensemblBfmppRelease	:= "32"
flybaseRelease		:= "FB2016_04"
flybaseGenomes		:= [ 'dana_r1.05', 'dere_r1.05', 'dgri_r1.05', 'dmel_r6.19', 'dmoj_r1.04', 'dper_r1.3', 'dpse_r3.04', 'dsec_r1.3', 'dsim_r2.02', 'dvir_r1.06', 'dwil_r1.05', 'dyak_r1.05' ]
GRCH				:= "GRCh38"
GRCHs				:= ["GRCh37", "GRCh38"]
GRCh2Hg				:= {"GRCh37" => "hg19", "GRCh38" => "hg38"}
GRCM				:= "GRCm38"
humanChrs			:= [ '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '21', '22', 'X', 'Y', 'MT']
humanChrsDd			:= [ '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '21', '22', 'X', 'Y', 'MT']
dbNsfpVer			:= '3.1a'
ucscGenomes			:= [ 'hg19', 'mm9', 'mm10' ] # Get full list from "curl ftp://hgdownload.cse.ucsc.edu/goldenPath/"
ucscGenomesKg		:= [ 'hg19', 'hg38' ]

# Configuration parameters
#bundles				:= ["NCBI_bacteria", "NCBI_viruses", "ENSEMBL_BFMPP_$ensemblBfmppRelease"]
bundles				:= ["ENSEMBL_BFMPP_$ensemblBfmppRelease"]

# Commands
snpeff				:= "java -Xmx10G -jar snpEff.jar "
snpeffXl			:= "java -Xmx50G -jar snpEff.jar "
snpeffBuild			:= "$snpeff build -v"
snpsift				:= "java -jar SnpSift.jar "
wget				:= "wget -N --retr-symlinks"
wgetA				:= "wget -r -N -A"
cp					:= "cp -v -u"

# Directories
dirSnpEff			:= "$HOME/snpEff"
dirClinEff			:= "$HOME/clinEff"
dirBuild			:= "$dirSnpEff/build"
dirData				:= "$dirSnpEff/data"
dirDb				:= "$dirSnpEff/db"
dirDarned			:= "$dirDb/darned"
dirDownload			:= "$dirSnpEff/download"
dirGdrive           := "$HOME/gdrive"
dirNextProt         := "$dirDb/nextProt"
dirPdb              := "$dirDb/pdb"
dirScripts			:= "$dirSnpEff/scripts"
dirScriptsBuild		:= "$dirSnpEff/scripts_build"
dirZip				:= "$dirSnpEff/zip"
pwmsBin				:= "$dirDb/jaspar/pwms.bin"
ensembl2refSeqTrIds := "$dirDb/ensembl2refSeq/ensembl2refSeq.GRCh.txt"

# URLs
snpeffDownload		:= "http://sourceforge.net/projects/snpeff/files/snpEff_latest_core.zip"

# Output files
buildSummary		:= "build.out"

# Include (depends on some of the variables defined above)
include 'download.bds'

#-------------------------------------------------------------------------------
# Variables
#-------------------------------------------------------------------------------

string{} built

# SnpEff version
snpEffVersion := ""

#-------------------------------------------------------------------------------
# Add a task to build a database for 'genome'
#-------------------------------------------------------------------------------
bool addBuildDb(string genome) {
	dir := "$dirData/$genome"
	db := "$dir/snpEffectPredictor.bin"
	geneFiles := dir.dirPath("genes.*") 

	# No 'genes' file? Error
	if( geneFiles.isEmpty() ) {
		warning("No genes file for $genome\n")
		return( false );
	}

	geneFile := geneFiles.head()
	if( built.hasKey(genome) ) {
		print("INFO : Genome $genome already built\n")
	} else if( db <- geneFile ) {
		print("BUILD:\t$genome\tgeneFile: $geneFile\tdb: $db\n")

		# Use 'storeSeqs' for human and mouse genome
		opt := ( genome.startsWith('GRC') || genome.startsWith('hg') ? "-storeSeqs" : "" )

		task $snpeffBuild $opt $genome 2>&1 | tee $dirBuild/build.$genome.out
	} else {
		print("OK  :\t$genome\tgeneFile: $geneFile\tdb: $db\n")
	}

	# Mark as built
	built{genome} = genome
	return( true )
}

#-------------------------------------------------------------------------------
# Build JAR files (compile)
#-------------------------------------------------------------------------------
void build() {
	buildConfig()

	println("Building SnpEff & SnpSift")
	sys ./scripts_build/make.sh

	println("Building ClinEff")
	sys cd $HOME/workspace/ClinEff/ ; ant
}

#-------------------------------------------------------------------------------
# Build bundle lists
#-------------------------------------------------------------------------------
void buildBundleLists() {
	println "Make bundle lists:"

	for( string bundle : bundles ) {
		conf := "config/snpEff.bundles.$bundle.config"

		if( conf.exists() ) {
			print "Config file '$conf' exists, nothing done\n"
		} else {
			println "Creating bundles '$bundle' -> '$conf'"
			sys cat config/snpEff.$bundle.config | cut -f 1 -d : | grep ".genome" | sed "s/.genome\s*//" | tr -d " " > snpEff.bundles.$bundle.genomes.txt
			sys ./scripts_build/createBundles.pl snpEff.bundles.$bundle.genomes.txt $bundle > $conf
		}
	}

	# We must rebuild config file
	buildConfig()
}

#-------------------------------------------------------------------------------
# Build configuration file (snpEff.config)
#-------------------------------------------------------------------------------
void buildConfig() {
	confDir := "$dirSnpEff/config"
	conf := "$dirSnpEff/snpEff.config"

	println "Building config file '$conf'"

	sys cat $confDir/snpEff.core.config > $conf
	sys cat $confDir/snpEff.dbs.config >> $conf
	sys cat	$confDir/snpEff.test.config >> $conf

	for(int ensemblRelease : ensemblReleases ) {
		sys echo >> $conf
		sys echo "#---" >> $conf
		sys echo "# ENSEMBL release $ensemblRelease" >> $conf
		sys echo "#---" >> $conf
		sys cat $confDir/snpEff.ENSEMBL_$ensemblRelease.config >> $conf
	}

	sys echo >> $conf
	sys echo "#---" >> $conf
	sys echo "# NCBI genomes" >> $conf
	sys echo "#---" >> $conf
	sys cat	$confDir/snpEff.NCBI.*.config >> $conf

	sys echo >> $conf
	sys echo "#---" >> $conf
	sys echo "# ENSEMBL BFMPP release $ensemblBfmppRelease" >> $conf
	sys echo "#---" >> $conf
	sys cat $confDir/snpEff.ENSEMBL_BFMPP_$ensemblBfmppRelease.config >> $conf

	sys echo >> $conf
	sys echo "#---" >> $conf
	sys echo "# FLYBASE release $flybaseRelease" >> $conf
	sys echo "#---" >> $conf
	sys cat	$confDir/snpEff.FLYBASE_$flybaseRelease.config >> $conf

	for( string b : bundles) {
		sys echo >> $conf
		sys echo "#---" >> $conf
		sys echo "# ENSEMBL Bundles $b" >> $conf
		sys echo "#---" >> $conf
		sys cat $confDir/snpEff.bundles.$b.config >> $conf
	}
}

#-------------------------------------------------------------------------------
# Build all databases
#-------------------------------------------------------------------------------
void buildDb() {
	# We must do this before building
	copyPwm()
	copyCytoBands()

	if( ! dbs.isEmpty() )	dbs.buildDbs()			# Build some genomes

	else buildDbAll()	# Build ALL genomes
	buildDbSpecial()
	buildDbPdb()
}

#-------------------------------------------------------------------------------
# Build all databases
#-------------------------------------------------------------------------------
bool buildDbAll() {
	print("Build all dbs: Start\n")
	dirBuild.mkdir()	# Make sure build dir exists
	
	# Look into all directories
	print("Available databases:\n")
	dbids := sys $snpeff databases | cut -f 1 | tail -n +3 

	print("Building:\n")
	for(string genome : dbids.lines()  ) {
		genome = genome.trim().baseName()
		addBuildDb(genome)
	}
	wait

	# Create build summary
	print("Build: Checking build logs!\n")
	sys cat $dirBuild/build.*.out | ./scripts_build/buildCheck.pl | tee $buildSummary

	print("Build: Done!\n")
	return( true )
}

#-------------------------------------------------------------------------------
# Build some databases
#-------------------------------------------------------------------------------
bool buildDbs(string[] dbids) {
	print("Build dbs: Start\n")
	dirBuild.mkdir()	# Make sure build dir exists
	
	print("Building:\n")
	for(string genome : dbids  ) {
		println "\t$genome"
		addBuildDb(genome)
	}
	wait

	print("Build: Done!\n")
	return( true )
}

#-------------------------------------------------------------------------------
# Build 'interaction' databases
#-------------------------------------------------------------------------------
void buildDbPdb() {
	print("Build PDB.\n")

	dataDirsHg := dirsHg()

	# Check each genome version
	for( string hg : dataDirsHg ) {
		hg = hg.baseName()
		println "\t$hg"
		pdbfile := "$dirData/$hg/interactions.bin"

		if( !pdbfile.exists() ) {
			print("PDB ($hg): Build\t\tPDB db file: '$pdbfile'\n")
			task $snpeff pdb -v -pdbDir $dirPdb -idMap $dirPdb/idMap_pdbId_ensemblId_refseqId.txt.gz $hg 
		} else {
			print("PDB ($hg): OK\t\tPDB db file: '$pdbfile'\n")
		}
	}
}

#-------------------------------------------------------------------------------
# Build special databases
#-------------------------------------------------------------------------------
void buildDbSpecial() {
	buildDbNextProt()
}

#-------------------------------------------------------------------------------
# Build databases used in test cases
#-------------------------------------------------------------------------------
void buildDbTest() {
	dirs := "$dirSnpEff/data/".dir("test*")

	# This one needs PWMs
	sys cp $pwmsBin data/testHg3770Chr22/

	# Build all test genomes
	for( string gen : dirs ) {
		db := "$dirSnpEff/data/$gen/snpEffectPredictor.bin"
		if( ! db.exists() )	{
			println "Genome: $gen\tdb: '$db'"
			task( cpus := 2 ) {
				sys $snpeff build -v -storeSeqs $gen
			}
		}
	}

	# Build PDB database for testHg19Chr1
	# We need to make sure that PDB entries for test cases are in these dirs
	pdbTestCases := ['testHg19Chr1', 'testHg19Chr22']
	for( string genome : pdbTestCases ) {
		task $snpeff pdb -v \
				-pdbDir $dirSnpEff/data/$genome \
				-idMap $dirPdb/idMap_pdbId_ensemblId_refseqId.txt.gz \
				$genome
	}
}

#-------------------------------------------------------------------------------
# Build special databases
#-------------------------------------------------------------------------------
void buildDbNextProt() {
	# Note: This takes a huge amount of memory, don't run multiple of these process because the server will crash
	print("Build NextProt\n")

	# XML files used to build NextProt
	dirNextProt := "$dirSnpEff/db/nextProt/"
	xmlFiles := dirNextProt.dirPath("*.xml")

	# Check each genome version
	for( string hg : dirsHg() ) {
		hg = hg.baseName()
		npfile := "$dirData/$hg/nextProt.bin"

		if( !npfile.exists() ) {
			print("NextProt ($hg): Build\t\tNextProt db file: '$npfile'\n")
			sys $snpeffXl buildNextProt -v -trIds $ensembl2refSeqTrIds $hg db/nextProt/
		} else {
			print("NextProt ($hg): OK\t\tNextProt db file: '$npfile'\n")
		}
	}
}

#-------------------------------------------------------------------------------
# Copy CytoBands to dirs
#-------------------------------------------------------------------------------
void copyCytoBands() {
	humanDirs := dirsHg()
	print("Copying cytoBands file to human genomes\n")
	for( string hg : humanDirs ) {
		dir := "$dirData/$hg/"
		gr := grch(hg)
		cyto := "$dirDb/$gr/cytoBand/cytoBand.txt.gz"
		print("\t$cyto\t=>\t$dir\n")

		sys cp $cyto $dir
	}
}

#-------------------------------------------------------------------------------
# Copy pwms.bin to every human dir
#-------------------------------------------------------------------------------
void copyPwm() {
	humanDirs := dirsHg()
	print("Copying $pwmsBin to human genomes\n")
	for( string hg : humanDirs ) {
		dir := "$dirData/$hg/"
		print("\t$hg: $dir\n")
		sys cp $pwmsBin $dir
	}
}

#-------------------------------------------------------------------------------
# Create 'software vesion' file
#-------------------------------------------------------------------------------
string createVersionFile(string htmlDir) {
	verFile := "$htmlDir/versions.txt"
	println "Creating versions file: '$verFile'"
	snpEffVer  := sys $snpeff -version 2>&1
	verFile.write(snpEffVer.trim().toUpper() + "\t$snpeffDownload\n");
	return verFile
}

#-------------------------------------------------------------------------------
# Human genomes data dirs
#-------------------------------------------------------------------------------
string[] dirsHg() {
	return dirData.dir("GRCh*") + dirData.dir("hg*")
}

#-------------------------------------------------------------------------------
# Download all databases
#-------------------------------------------------------------------------------
void downloadAll() {
	# Ensembl genomes
	for( int ensemblRelease : ensemblReleases ) {
		downloadEnsembl(ensemblRelease)
	}
	downloadEnsemblBfmpp()

	# UCSC genomes
	for( string ref : ucscGenomes ) {
		ref.downloadUcscGenome()
	}
	downloadUcscHg38()	# Hg38 doesn't have the same dir structure so we need a special function

	# UCSC 'known genes' data (instead of 'RefSeq')
	for( string ref : ucscGenomesKg ) {
		ref.downloadUcscKg()
	}

	# Other databases
	downloadCytoBands()
	downloadJaspar()
	downloadGwasCatalog()
	downloadNextProt()
	downloadPdb()
	downloadDbNsfp()	# We need to update this method
	downloadClinvar()
	downloadDbSnp()

	# FlyBase
	downloadFlyBase()
}

#-------------------------------------------------------------------------------
# Inger coordinates type fr huma genome: 'GRCh37' or 'GRCh38'
#-------------------------------------------------------------------------------
string grch(string hg) {
	if( hg.startsWith('GRCh37') ) return 'GRCh37'
	if( hg.startsWith('hg19') ) return 'GRCh37'
	if( hg.startsWith('GRCh38') ) return 'GRCh38'
	if( hg.startsWith('hg38') ) return 'GRCh38'
	error("Unknown coordinates for genome version '$hg'")
}

#-------------------------------------------------------------------------------
# Create distribution files
#-------------------------------------------------------------------------------
void makeDistro() {
	dirZip.mkdir()	# Make sure zip dir exists
	zipCore()
	zipDbs()
	zipBundles()
}

#-------------------------------------------------------------------------------
# Run test cases
#-------------------------------------------------------------------------------
void runTests() {
	runTestsSnpSiftAll()
	runTestsSnpEffIntegration()
	runTestsSnpEffUnity()
	runTestsClinEffAll()
}

#-------------------------------------------------------------------------------
# Run test cases: ClinEff-All
#-------------------------------------------------------------------------------
void runTestsClinEffAll() {
	task cd $HOME/workspace/ClinEff/ ; \
		java -Xmx4g \
			-cp $dirClinEff/ClinEff.jar \
			org.junit.runner.JUnitCore \
			com.clineff.testCases.TestSuiteAll \
			2>&1 \
			| tee $dirSnpEff/testcases.clineff.all.txt
}

#-------------------------------------------------------------------------------
# Run test cases: SnpSift
#-------------------------------------------------------------------------------
void runTestsSnpSiftAll() {
	task cd $HOME/workspace/SnpSift/ ; \
		java -Xmx4g \
			-cp $dirSnpEff/SnpSift.jar \
			org.junit.runner.JUnitCore \
			org.snpsift.testCases.TestSuiteAll \
			2>&1 \
			| tee $dirSnpEff/testcases.snpsift.all.txt
}

#-------------------------------------------------------------------------------
# Run test cases: SnpEff-HGVS
#-------------------------------------------------------------------------------
void runTestsSnpEffHgvs() {
	task cd $HOME/workspace/SnpEff/ ; \
		java -Xmx4g \
			-cp $dirSnpEff/snpEff.jar \
			org.junit.runner.JUnitCore \
			org.snpeff.snpEffect.testCases.TestSuiteHgvs \
			2>&1 \
			| tee $dirSnpEff/testcases.snpeff.hgvs.txt
}

#-------------------------------------------------------------------------------
# Run test cases: SnpEff-Integration
#-------------------------------------------------------------------------------
void runTestsSnpEffIntegration() {
	task cd $HOME/workspace/SnpEff/ ; \
		java -Xmx4g \
			-cp $dirSnpEff/snpEff.jar \
			org.junit.runner.JUnitCore \
			org.snpeff.snpEffect.testCases.TestSuiteIntegration \
			2>&1 \
			| tee $dirSnpEff/testcases.snpeff.integration.txt
}

#-------------------------------------------------------------------------------
# Run test cases: SnpEff Unity
#-------------------------------------------------------------------------------
void runTestsSnpEffUnity() {
	# Run SnpEff test cases: Unity
	task cd $HOME/workspace/SnpEff/ ; \
		java -Xmx4g \
			-cp $dirSnpEff/snpEff.jar \
			org.junit.runner.JUnitCore \
			org.snpeff.snpEffect.testCases.TestSuiteUnity \
			2>&1 \
			| tee $dirSnpEff/testcases.snpeff.unity.txt
}

#-------------------------------------------------------------------------------
# Upload core files
#-------------------------------------------------------------------------------
void uploadCore2Sf() {
	zip := "snpEff_v" + versionSubUnd() + "_core.zip"
	zipLatest := "snpEff_latest_core.zip"
	sys scp -v $zip $zipLatest pcingola,snpeff@frs.sourceforge.net:/home/frs/project/s/sn/snpeff/
}

#-------------------------------------------------------------------------------
# Upload DbNsfp files
#-------------------------------------------------------------------------------
void uploadDbNsfp2Gdrive() {
	for(string grch : GRCHs) {
		base := "dbNSFPv$dbNsfpVer"
		bgFile := "$dirDb/$grch/$base.txt.gz"
		tbiFile := "$dirDb/$grch/$base.txt.gz.tbi"
		if( "$dirGdrive/$base.txt.gz" <- bgFile ) sys scp -v $bgFile $tbiFile $dirGdrive
	}

	# Upload to goolge drive
	sys cd $dirGdrive ; drive upload file public/snpEff/db/GRCh38/dbNSFP/ 2>&1 | tee gdrive_info.txt
}

#-------------------------------------------------------------------------------
# Upload database files
#-------------------------------------------------------------------------------
void uploadDbs2Sf() {
	ver := versionUnd()
	sys scp -v $dirZip/snpEff_v$ver*.zip pcingola,snpeff@frs.sourceforge.net:/home/frs/project/s/sn/snpeff/databases/v$ver/
}

#-------------------------------------------------------------------------------
# Upload core files
#-------------------------------------------------------------------------------
void uploadDev2Sf() {
	zipDev    := "snpEff_development.zip"
	sys scp -v $zipDev pcingola,snpeff@frs.sourceforge.net:/home/frs/project/s/sn/snpeff/
}

#-------------------------------------------------------------------------------
# Upload binary files
#-------------------------------------------------------------------------------
void uploadHtml2Sf() {
	htmlDir := "$HOME/workspace/SnpEff/html"
	verFile := htmlDir.createVersionFile()

	# Upload HTML, versions and images to SF
	println "Upload web pages"
	sys cd $htmlDir ; scp -v -r style.css *.html *.txt *.pdf images/ pcingola,snpeff@frs.sourceforge.net:htdocs/
}

#-------------------------------------------------------------------------------
# SnpEff's version 
#-------------------------------------------------------------------------------
string version() {
	if( snpEffVersion == '' ) {
		snpEffVersion = sys $snpeff -version | cut -f 2
	}
	return snpEffVersion;
}

#-------------------------------------------------------------------------------
# SnpEff's version using underscores instead of '.'
#-------------------------------------------------------------------------------
string versionUnd() {
	ver := version()
	return ver.replace("\.","_").replaceAll("[a-zA-Z]", "").trim() # Remove sub-version letter
}

#-------------------------------------------------------------------------------
# SnpEff's version using underscores instead of '.'
#-------------------------------------------------------------------------------
string versionSubUnd() {
	ver := version()
	return ver.replace("\.","_").trim()
}

#-------------------------------------------------------------------------------
# Create bundle's ZIP files
#-------------------------------------------------------------------------------
void zipBundles() {
	println "Create bundles ZIP files"

	bundleList := "bundles.txt"
	bundleLines := sys cat $dirSnpEff/snpEff.config | grep .bundle. > $bundleList
	bundleList.rmOnExit()

	for( string bline : bundleList.read().lines() ) {
		bfields := bline.split(':')

		# Bundle name
		bname := bfields[0].trim().removeExt('.bundle')

		string[] bins
		for( string gen : bfields[1].split(' ') ) {
			bin := "$dirData/$gen/snpEffectPredictor.bin"
			if( bin.exists() ) bins.add( bin )
		}

		# Zip files
		zipList := bins.join(' ')
		zipName := "$dirZip/snpEff_v" + versionUnd() + "_" + bname + ".zip"
		if( zipName <- bins ) {
			println "\tZIP Bundle: $zipName"
			task zip $zipName $zipList
		}
	}
}

#-------------------------------------------------------------------------------
# Create SnpEff core Zip file
#-------------------------------------------------------------------------------
void zipCore() {
	ver := versionSubUnd()
	dir := "snpEff"
	sys rm -rvf $dir
	sys mkdir $dir

	# Copy core files
	sys cp -RvfL snpEff.config snpEff.jar SnpSift.jar examples galaxy scripts $dir

	# Copy ClinEff files
	clinEff := "$HOME/clinEff"
	dirClinEff := "clinEff"
	sys rm -rvf $dirClinEff
	sys mkdir $dirClinEff
	sys cp -RvfL $clinEff/clinEff.config $clinEff/ClinEff.jar $clinEff/workflow* $clinEff/report $dirClinEff

	# Create 'core' zip file
	zip := "snpEff_v" + ver + "_core.zip"
	zipLatest := "snpEff_latest_core.zip"
	zipDev    := "snpEff_development.zip"
	sys rm -f $zip 2> /dev/null
	task { 
		sys zip -r $zip snpEff clinEff
		sys cp $zip $zipLatest
		sys cp $zip $zipDev
	}
}

#-------------------------------------------------------------------------------
# Create databases (non-bundled) Zip files
#-------------------------------------------------------------------------------
void zipDb(string gen) {
	bin := "data/$gen/snpEffectPredictor.bin"

	# Do not create ZIP file unless database exists
	if( bin.exists() ) {
		zip := "$dirZip/snpEff_v" + versionUnd() + "_$gen.zip"
		println "\tZIP '$zip'"

		cyto := "data/$gen/cytoBand.txt.gz"
		if( ! cyto.exists() ) cyto = ""

		task( zip <- bin )	sys zip -r $zip data/$gen/*.bin $cyto
	} else {
		println "\tERROR: database $bin not found"
	}
}

#-------------------------------------------------------------------------------
# Create databases (non-bundled) Zip files
#-------------------------------------------------------------------------------
void zipDbs(string[] gens) {
	for( string gen : gens ) {
		zipDb(gen)
	}
}

#-------------------------------------------------------------------------------
# Create databases (non-bundled) Zip files
#-------------------------------------------------------------------------------
void zipDbs() {
	println "Create database ZIP files"
	dbList := "databases.txt"
	dbs := sys $snpeff databases | cut -f 1,4 > $dbList
	dbList.rmOnExit()

	for( string db : dbList.read().lines() ) {
		fields := db.split('\t')
		gen := fields[0].trim()
		bundle := fields[1].trim()

		# Do not zip bundled databases
		if( bundle.isEmpty() )	zipDb(gen)
	}
}

#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------

print("Building\n")

if( args.isEmpty() )			build()										# No arguments? Build (create JAR files)
if( bundleLists )				buildBundleLists()							# Create bundle list and config files
if( config )					buildConfig()								# Create config file
if( db || !dbs.isEmpty() )		buildDb()									# Build ALL genomes
if( dbTest )					buildDbTest()								# Build databases used in test cases
if( distro )					makeDistro()								# Create distribution files
if( distroCore )				zipCore()									# Create distribution files (core 'zip')
if( distroBundles )				zipBundles()								# Create 'bundle' distribution files
if( download )					downloadAll()								# Perform downloads
if( !downloadNcbi.isEmpty() )	downloadNcbi.downloadNcbiGenome()			# Download NCBI genome
if( !downloadUcsc.isEmpty() )	downloadUcsc.downloadUcscGenome()			# Download UCSC genome
if( make )						build()										# Build (create JAR files)
if( query )						queryUcscAll()								# Query UCSC database
if( test )						runTests()									# Run test cases 
if( testHgvs )					runTestsSnpEffHgvs()						# Run test cases (SnpEff HGVS)
if( uploadCore )				uploadCore2Sf()								# Upload 'core' files
if( uploadDbs )					uploadDbs2Sf()								# Upload all database files in 'zip' dir
if( uploadDbNsfp )				uploadDbNsfp2Gdrive()						# Upload dbNsfp database files to google drive
if( uploadDev )					uploadDev2Sf()								# Upload 'development' version
if( uploadHtml )				uploadHtml2Sf()								# Upload html pages
if( !zipGenome.isEmpty() )		zipDbs(zipGenome)							# Zip only 'zipGenome' database

wait
print("Done\n")

