#!/usr/bin/env bds

#-------------------------------------------------------------------------------
#
# Download genome data
#
#-------------------------------------------------------------------------------

clinvar            := "clinvar.vcf.gz"
urlClinVarGrch37   := "ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh37/$clinvar"
urlClinVarGrch38   := "ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/$clinvar"
urlDbNsfp          := "ftp://dbnsfp:dbnsfp@dbnsfp.softgenetics.com/dbNSFPv$dbNsfpVer\.zip"
urlDbSnpGrch37     := "ftp://ftp.ncbi.nih.gov/snp/organisms/human_9606_b147_GRCh37p13/VCF/00-All.vcf.gz"
urlDbSnpGrch38     := "ftp://ftp.ncbi.nih.gov/snp/organisms/human_9606_b147_GRCh38p2/VCF/00-All.vcf.gz"
urlGwasCatalog     := "http://www.genome.gov/admin/gwascatalog.txt"
urlJaspar          := "http://jaspar.binf.ku.dk/html/DOWNLOAD/JASPAR_CORE/pfm/redundant/pfm_all.txt"
urlNextProt        := "ftp://ftp.nextprot.org/pub/current_release/xml"
urlPdb             := "rsync.wwpdb.org::ftp_data/structures/divided/pdb/"

#-------------------------------------------------------------------------------
# Build dbNSFP database for genome 'hg'
#-------------------------------------------------------------------------------
void buildDbNsfp(string hg, string base, string baseChr) {
	println "Building dbNSFP for '$hg'"
	hg.mkdir()

	bgFile := "$hg/$base\.txt.gz"
	index := "$bgFile\.tbi"
	if( bgFile.exists() && index.exists() )	return

	# Compress using bgzip
	string[] bgFiles
	for( string chr : humanChrs ) {
		if( chr == 'MT' ) chr = 'M'	# MT is called just 'M'

		chrFile := "$baseChr\_variant.chr$chr"
		bgChrFile := "$hg/$baseChr\_variant.chr$chr\.gz"
		bgFiles += bgChrFile

		println "\tCompressing file '$chrFile'"
		task( bgChrFile <- chrFile ) sys bgzip -c $chrFile > $bgChrFile
	}
	wait

	# Concatenate individual files
	println "\tCombining files"
	bgFilesStr := bgFiles.join(" ")
	if( bgFile <- bgFiles ) sys cat $bgFilesStr > $bgFile

	# Tabix-index the bgzip file
	println "\tCreating tabix index"
	if( index <- bgFile ) sys tabix -s 1 -b 2 -e 2 $bgFile
}

#-------------------------------------------------------------------------------
# Download ClinVar
#-------------------------------------------------------------------------------
void downloadClinvar() {
	println "Download Clinvar"

	# GRCh37
	dir := "$dirDb/GRCh37/clinvar/"
	dir.mkdir()
	dir.chdir()
	if( !clinvar.exists() ) fetch(urlClinVarGrch37)

	# GRCh38
	dir = "$dirDb/GRCh38/clinvar/"
	dir.mkdir()
	dir.chdir()
	if( !clinvar.exists() ) fetch(urlClinVarGrch38)

	wait
}

#-------------------------------------------------------------------------------
# Download dbNSFP
#-------------------------------------------------------------------------------
void downloadDbNsfp() {
	println "Download dbNSFP"

	dir := "$dirDb/GRCh38/dbNSFP/"
	dir.mkdir()
	dir.chdir()

	base := "dbNSFPv$dbNsfpVer"
	baseChr := "dbNSFP$dbNsfpVer"
	zip := "$base\.zip"

	# Download
	if( !zip.exists() ) {
		println "Download dbNsfp $urlDbNsfp ($zip)"
		fetch(urlDbNsfp)
	}

	# Unzip
	chr1 := "$baseChr\_variant.chr1"
	if( !chr1.exists() ) {
		print "Uncompressing dbNsfp: $zip ($chr1)\n"
		sys 7za x $zip
	}

	buildDbNsfp('.', base, baseChr)
	wait
}

#-------------------------------------------------------------------------------
# Download dbSnp
#-------------------------------------------------------------------------------
void downloadDbSnp() {
	println "Download dbSnp"

	dbsnp := "dbsnp.vcf.gz"

	# GRCh37
	dir := "$dirDb/GRCh37/dbSnp/"
	dir.mkdir()
	dir.chdir()
	if( !dbsnp.exists() ) {
		if( fetch(urlDbSnpGrch37) ) {
			sys cp 00-All.vcf.gz $dbsnp
		}
	}

	# GRCh38
	dir = "$dirDb/GRCh38/dbSnp/"
	dir.mkdir()
	dir.chdir()
	if( !dbsnp.exists() ) {
		if( fetch(urlDbSnpGrch38) ) {
			sys cp 00-All.vcf.gz $dbsnp
		}
	}

	wait
}

#-------------------------------------------------------------------------------
# Download GWAS catalog
#-------------------------------------------------------------------------------
void downloadGwasCatalog() {
	println "Download Gwas-Catalog"

	dir := "$dirDb/gwasCatalog"
	dir.mkdir()
	dir.chdir()

	if( fetch(urlGwasCatalog) ) {
		sys cat gwascatalog.txt | $dirScriptsBuild/gwascatalog2vcf.pl > gwascatalog.vcf
	}

	wait
}

#-------------------------------------------------------------------------------
# Download Jaspar
#-------------------------------------------------------------------------------
void downloadJaspar() {
	println "Download Jaspar"

	dir := "$dirDb/jaspar"
	dir.mkdir()
	dir.chdir()

	if( fetch(urlJaspar) ) {
		sys gzip -c pfm_all.txt > pwms.bin
		println "Jaspar: File $dir/pwms.bin created"
	}
}

#-------------------------------------------------------------------------------
# Download NextProt
#-------------------------------------------------------------------------------
void downloadNextProt() {
	println "Download NextProt"

	dir := "$dirDb/nextProt"
	dir.mkdir()
	dir.chdir()
	
	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		println "Download NextProt"

		# Download each chromosome's XML file
		for( string chr : humanChrsDd ) {
			fetch("$urlNextProt/nextprot_chromosome_$chr\.xml.gz")
		}

		downloadOk.write("OK")	# Mark as downlaoded OK
	}
}

#-------------------------------------------------------------------------------
# Download PDB
#-------------------------------------------------------------------------------
void downloadPdb() {
	println "Download PDB"

	dir := "$dirDb/pdb"
	dir.mkdir()
	dir.chdir()

	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		println "Download PDB"
		sys rsync -rlpt -v -z --delete --port=33444 $urlPdb .
		downloadOk.write("OK")	# Mark as downlaoded OK
	}
}

